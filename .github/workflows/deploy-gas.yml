name: Deploy to Google Apps Script

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g @google/clasp
        
        # Ensure jq is available for JSON processing
        sudo apt-get update && sudo apt-get install -y jq

    - name: Setup Clasp credentials
      run: |
        if [ -z "${{ secrets.CLASP_TOKEN }}" ]; then
          echo "Error: CLASP_TOKEN secret not found"
          exit 1
        fi
        
        echo "üîß Setting up Clasp credentials..."
        echo '${{ secrets.CLASP_TOKEN }}' > ~/.clasprc.json
        chmod 600 ~/.clasprc.json
        
        # Create backup of original token
        cp ~/.clasprc.json ~/.clasprc.json.backup
        
        # Validate token structure - clasp expects nested format with tokens.default
        echo "üîç Analyzing token format..."
        if jq -e '.tokens.default' ~/.clasprc.json >/dev/null 2>&1; then
          echo "‚úÖ Token is in correct nested format (tokens.default)"
          
          # Validate the nested token has required fields
          if jq -e '.tokens.default.access_token and .tokens.default.refresh_token and .tokens.default.client_id' ~/.clasprc.json >/dev/null; then
            echo "‚úÖ Token has all required nested fields"
          else
            echo "‚ùå Token missing required nested fields"
            echo "Required nested fields: tokens.default.access_token, tokens.default.refresh_token, tokens.default.client_id"
            echo "Available nested fields:"
            jq -r '.tokens.default | keys[]' ~/.clasprc.json
            exit 1
          fi
        else
          echo "‚ùå Token is in flat format, but clasp expects nested format"
          echo "üîÑ Converting flat format to nested format..."
          
          # Check if it's a flat format token
          if jq -e '.access_token and .refresh_token and .client_id' ~/.clasprc.json >/dev/null; then
            echo "üìã Converting flat token to nested format for clasp compatibility..."
            
            # Create nested format
            jq '{tokens: {default: .}}' ~/.clasprc.json > ~/.clasprc.json.tmp
            
            # Validate the conversion worked
            if jq -e '.tokens.default.access_token' ~/.clasprc.json.tmp >/dev/null; then
              mv ~/.clasprc.json.tmp ~/.clasprc.json
              echo "‚úÖ Token successfully converted to nested format"
            else
              echo "‚ùå Failed to convert token to nested format"
              rm -f ~/.clasprc.json.tmp
              exit 1
            fi
          else
            echo "‚ùå Token is neither valid flat nor nested format"
            echo "Available fields:"
            jq -r 'keys[]' ~/.clasprc.json
            exit 1
          fi
        fi
        
        echo "‚úÖ Clasp credentials configured and validated"

    - name: Validate authentication
      run: |
        echo "üîç Verifying Clasp setup..."
        if [ -f ~/.clasprc.json ]; then
          echo "‚úÖ Credentials file exists"
          
          # Check token structure based on actual format
          echo "üìã Token structure validation:"
          
          # Clasp expects nested format: tokens.default
          if jq -e '.tokens.default' ~/.clasprc.json >/dev/null 2>&1; then
            echo "‚úÖ Token is in correct nested format for clasp"
            if jq -e '.tokens.default.access_token' ~/.clasprc.json >/dev/null 2>&1; then
              echo "‚úÖ Has access_token (nested)"
            else
              echo "‚ùå Missing access_token (nested)"
            fi
            
            if jq -e '.tokens.default.refresh_token' ~/.clasprc.json >/dev/null 2>&1; then
              echo "‚úÖ Has refresh_token (nested)"
            else
              echo "‚ùå Missing refresh_token (nested)"
            fi
            
            if jq -e '.tokens.default.client_id' ~/.clasprc.json >/dev/null 2>&1; then
              echo "‚úÖ Has client_id (nested)"
            else
              echo "‚ùå Missing client_id (nested)"
            fi
          else
            echo "‚ùå Token not in expected nested format (tokens.default)"
            if jq -e '.access_token' ~/.clasprc.json >/dev/null 2>&1; then
              echo "‚ö†Ô∏è  Token appears to be in flat format, which clasp doesn't support"
            fi
          fi
          
          # Test clasp functionality with a simple command
          echo "üß™ Testing clasp functionality..."
          if timeout 30 clasp --version; then
            echo "‚úÖ Clasp version check successful"
          else
            echo "‚ö†Ô∏è Clasp version check failed or timed out"
          fi
          
        else
          echo "‚ùå Credentials file missing"
          exit 1
        fi

    - name: Validate Clasp configuration
      run: |
        if [ ! -f .clasp.json ]; then
          echo "Error: .clasp.json not found. Please create the GAS project first."
          echo "Run: clasp create --type standalone --title 'Your Project'"
          exit 1
        fi
        echo "Found .clasp.json:"
        cat .clasp.json

    - name: Push to Google Apps Script
      run: |
        echo "üì§ Pushing files to Google Apps Script..."
        SCRIPT_ID=$(cat .clasp.json | grep scriptId | cut -d '"' -f 4)
        echo "Project Script ID: $SCRIPT_ID"
        
        # Strategy 1: Direct push with current token format
        echo "üöÄ Attempt 1: Direct push..."
        if timeout 60 clasp push --force; then
          echo "‚úÖ Successfully pushed to GAS (direct method)"
          exit 0
        fi
        
        echo "‚ö†Ô∏è Direct push failed. Trying token refresh strategy..."
        
        # Strategy 2: Try to refresh the token first
        echo "üîÑ Attempt 2: Token refresh + push..."
        if timeout 30 clasp login --no-localhost 2>/dev/null; then
          echo "Token refresh completed"
          if timeout 60 clasp push --force; then
            echo "‚úÖ Successfully pushed to GAS (after token refresh)"
            exit 0
          fi
        fi
        
        echo "‚ö†Ô∏è Token refresh method failed. Trying alternative token format..."
        
        # Strategy 3: Try with nested token format (restore original)
        echo "üîÑ Attempt 3: Restore nested token format..."
        if [ -f ~/.clasprc.json.backup ]; then
          cp ~/.clasprc.json.backup ~/.clasprc.json
          if timeout 60 clasp push --force; then
            echo "‚úÖ Successfully pushed to GAS (nested format)"
            exit 0
          fi
        fi
        
        echo "‚ùå All push strategies failed"
        echo "üîç Final diagnostics:"
        echo "Token file exists: $([ -f ~/.clasprc.json ] && echo 'YES' || echo 'NO')"
        echo "Project config exists: $([ -f .clasp.json ] && echo 'YES' || echo 'NO')"
        echo "Clasp version: $(clasp --version)"
        
        exit 1

    - name: Deploy to GAS (on main branch only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        clasp deploy --description "Auto-deploy from GitHub Actions - $(date)"
      continue-on-error: true

    - name: Get project info
      run: |
        echo "üìä GAS Project Information:"
        SCRIPT_ID=$(cat .clasp.json | grep scriptId | cut -d '"' -f 4)
        echo "Script ID: $SCRIPT_ID"
        echo "üìù Editor URL: https://script.google.com/d/$SCRIPT_ID/edit"
        echo "üåê Web App URL: https://script.google.com/macros/s/$SCRIPT_ID/exec"
        echo "‚úÖ Deployment completed successfully!"
